# Docker Compose for local development
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: finops_dashboard
      POSTGRES_USER: finops_user
      POSTGRES_PASSWORD: finops_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finops_user -d finops_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finops_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - finops_network

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://finops_user:finops_password@postgres:5432/finops_dashboard
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
      - ALLOWED_HOSTS=localhost,127.0.0.1,web
    volumes:
      - static_files:/home/app/staticfiles
      - media_files:/home/app/media
      - ./logs:/home/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - finops_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /home/app/temp

  # Celery Worker
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.celery
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://finops_user:finops_password@postgres:5432/finops_dashboard
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./logs:/home/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finops_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /home/app/temp

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.celery
    command: celery -A finops_dashboard beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://finops_user:finops_password@postgres:5432/finops_dashboard
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./logs:/home/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finops_network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /home/app/temp

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - finops_network
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local

networks:
  finops_network:
    driver: bridge
